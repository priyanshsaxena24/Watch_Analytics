{"ast":null,"code":"var _jsxFileName = \"/Users/priyanshsaxena/Documents/SummerProjects/Watch_Analytics/frontend/youtube-watch-analytics/src/ChartPage.js\";\n// import React from 'react';\n// import { Bar } from 'react-chartjs-2';\n// import 'chart.js/auto';\n// import data from './data.json'; // Assume the JSON data is in a file called data.json\n\n// const processData = (data) => {\n// const totalWatchTime = {};\n// const mostViewedChannel = {};\n// const mostViewedCategory = {};\n\n// for (const day in data) {\n//     totalWatchTime[day] = 0;\n//     mostViewedChannel[day] = {};\n//     mostViewedCategory[day] = {};\n\n//     data[day].forEach(video => {\n//     totalWatchTime[day] += video.watchTime;\n\n//     if (mostViewedChannel[day][video.channelName]) {\n//         mostViewedChannel[day][video.channelName] += video.watchTime;\n//     } else {\n//         mostViewedChannel[day][video.channelName] = video.watchTime;\n//     }\n\n//     if (mostViewedCategory[day][video.category]) {\n//         mostViewedCategory[day][video.category] += video.watchTime;\n//     } else {\n//         mostViewedCategory[day][video.category] = video.watchTime;\n//     }\n//     });\n// }\n\n// return { totalWatchTime, mostViewedChannel, mostViewedCategory };\n// };\n\n// const { totalWatchTime, mostViewedChannel, mostViewedCategory } = processData(data);\n\n// const findMaxKey = (obj) => {\n// return Object.keys(obj).reduce((a, b) => (obj[a] > obj[b] ? a : b));\n// };\n\n// const labels = Object.keys(data);\n\n// const totalWatchTimeData = labels.map(day => totalWatchTime[day]);\n\n// const mostViewedChannelData = labels.map(day => {\n// const channel = findMaxKey(mostViewedChannel[day]);\n// return { day, channel, watchTime: mostViewedChannel[day][channel] };\n// });\n\n// const mostViewedCategoryData = labels.map(day => {\n// const category = findMaxKey(mostViewedCategory[day]);\n// return { day, category, watchTime: mostViewedCategory[day][category] };\n// });\n\n// const ChartPage = () => {\n// return (\n//     <div>\n//     <h1>YouTube Watch Analytics</h1>\n\n//     <h2>Total Watch Time (Day/Date Wise)</h2>\n//     <Bar \n//         data={{\n//         labels,\n//         datasets: [{\n//             label: 'Total Watch Time (seconds)',\n//             data: totalWatchTimeData,\n//             backgroundColor: 'rgba(75, 192, 192, 0.2)',\n//             borderColor: 'rgba(75, 192, 192, 1)',\n//             borderWidth: 1\n//         }]\n//         }}\n//         options={{\n//         scales: {\n//             y: {\n//             beginAtZero: true\n//             }\n//         }\n//         }}\n//     />\n\n//     <h2>Most Viewed Channel (Day/Date Wise)</h2>\n//     <Bar \n//         data={{\n//         labels,\n//         datasets: [{\n//             label: 'Most Viewed Channel',\n//             data: mostViewedChannelData.map(item => item.watchTime),\n//             backgroundColor: 'rgba(153, 102, 255, 0.2)',\n//             borderColor: 'rgba(153, 102, 255, 1)',\n//             borderWidth: 1\n//         }]\n//         }}\n//         options={{\n//         scales: {\n//             y: {\n//             beginAtZero: true\n//             }\n//         },\n//         plugins: {\n//             tooltip: {\n//             callbacks: {\n//                 label: function(context) {\n//                 return `${mostViewedChannelData[context.dataIndex].channel}: ${context.raw} seconds`;\n//                 }\n//             }\n//             }\n//         }\n//         }}\n//     />\n\n//     <h2>Most Viewed Category (Day/Date Wise)</h2>\n//     <Bar \n//         data={{\n//         labels,\n//         datasets: [{\n//             label: 'Most Viewed Category',\n//             data: mostViewedCategoryData.map(item => item.watchTime),\n//             backgroundColor: 'rgba(255, 159, 64, 0.2)',\n//             borderColor: 'rgba(255, 159, 64, 1)',\n//             borderWidth: 1\n//         }]\n//         }}\n//         options={{\n//         scales: {\n//             y: {\n//             beginAtZero: true\n//             }\n//         },\n//         plugins: {\n//             tooltip: {\n//             callbacks: {\n//                 label: function(context) {\n//                 return `${mostViewedCategoryData[context.dataIndex].category}: ${context.raw} seconds`;\n//                 }\n//             }\n//             }\n//         }\n//         }}\n//     />\n//     </div>\n// );\n// };\n\n// export default ChartPage;\nimport React from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport data from './data.json'; // Ensure this path is correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartPage = () => {\n  // Simple test data\n  const labels = ['Today', 'Yesterday', 'Saturday'];\n  const testData = [3000, 4000, 2000];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"YouTube Watch Analytics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Total Watch Time (Day/Date Wise)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      data: {\n        labels,\n        datasets: [{\n          label: 'Total Watch Time (seconds)',\n          data: testData,\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          borderColor: 'rgba(75, 192, 192, 1)',\n          borderWidth: 1\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n_c = ChartPage;\nexport default ChartPage;\nvar _c;\n$RefreshReg$(_c, \"ChartPage\");","map":{"version":3,"names":["React","Bar","data","jsxDEV","_jsxDEV","ChartPage","labels","testData","children","fileName","_jsxFileName","lineNumber","columnNumber","datasets","label","backgroundColor","borderColor","borderWidth","options","scales","y","beginAtZero","_c","$RefreshReg$"],"sources":["/Users/priyanshsaxena/Documents/SummerProjects/Watch_Analytics/frontend/youtube-watch-analytics/src/ChartPage.js"],"sourcesContent":["// import React from 'react';\n// import { Bar } from 'react-chartjs-2';\n// import 'chart.js/auto';\n// import data from './data.json'; // Assume the JSON data is in a file called data.json\n\n// const processData = (data) => {\n// const totalWatchTime = {};\n// const mostViewedChannel = {};\n// const mostViewedCategory = {};\n\n// for (const day in data) {\n//     totalWatchTime[day] = 0;\n//     mostViewedChannel[day] = {};\n//     mostViewedCategory[day] = {};\n\n//     data[day].forEach(video => {\n//     totalWatchTime[day] += video.watchTime;\n\n//     if (mostViewedChannel[day][video.channelName]) {\n//         mostViewedChannel[day][video.channelName] += video.watchTime;\n//     } else {\n//         mostViewedChannel[day][video.channelName] = video.watchTime;\n//     }\n\n//     if (mostViewedCategory[day][video.category]) {\n//         mostViewedCategory[day][video.category] += video.watchTime;\n//     } else {\n//         mostViewedCategory[day][video.category] = video.watchTime;\n//     }\n//     });\n// }\n\n// return { totalWatchTime, mostViewedChannel, mostViewedCategory };\n// };\n\n// const { totalWatchTime, mostViewedChannel, mostViewedCategory } = processData(data);\n\n// const findMaxKey = (obj) => {\n// return Object.keys(obj).reduce((a, b) => (obj[a] > obj[b] ? a : b));\n// };\n\n// const labels = Object.keys(data);\n\n// const totalWatchTimeData = labels.map(day => totalWatchTime[day]);\n\n// const mostViewedChannelData = labels.map(day => {\n// const channel = findMaxKey(mostViewedChannel[day]);\n// return { day, channel, watchTime: mostViewedChannel[day][channel] };\n// });\n\n// const mostViewedCategoryData = labels.map(day => {\n// const category = findMaxKey(mostViewedCategory[day]);\n// return { day, category, watchTime: mostViewedCategory[day][category] };\n// });\n\n// const ChartPage = () => {\n// return (\n//     <div>\n//     <h1>YouTube Watch Analytics</h1>\n    \n//     <h2>Total Watch Time (Day/Date Wise)</h2>\n//     <Bar \n//         data={{\n//         labels,\n//         datasets: [{\n//             label: 'Total Watch Time (seconds)',\n//             data: totalWatchTimeData,\n//             backgroundColor: 'rgba(75, 192, 192, 0.2)',\n//             borderColor: 'rgba(75, 192, 192, 1)',\n//             borderWidth: 1\n//         }]\n//         }}\n//         options={{\n//         scales: {\n//             y: {\n//             beginAtZero: true\n//             }\n//         }\n//         }}\n//     />\n    \n//     <h2>Most Viewed Channel (Day/Date Wise)</h2>\n//     <Bar \n//         data={{\n//         labels,\n//         datasets: [{\n//             label: 'Most Viewed Channel',\n//             data: mostViewedChannelData.map(item => item.watchTime),\n//             backgroundColor: 'rgba(153, 102, 255, 0.2)',\n//             borderColor: 'rgba(153, 102, 255, 1)',\n//             borderWidth: 1\n//         }]\n//         }}\n//         options={{\n//         scales: {\n//             y: {\n//             beginAtZero: true\n//             }\n//         },\n//         plugins: {\n//             tooltip: {\n//             callbacks: {\n//                 label: function(context) {\n//                 return `${mostViewedChannelData[context.dataIndex].channel}: ${context.raw} seconds`;\n//                 }\n//             }\n//             }\n//         }\n//         }}\n//     />\n    \n//     <h2>Most Viewed Category (Day/Date Wise)</h2>\n//     <Bar \n//         data={{\n//         labels,\n//         datasets: [{\n//             label: 'Most Viewed Category',\n//             data: mostViewedCategoryData.map(item => item.watchTime),\n//             backgroundColor: 'rgba(255, 159, 64, 0.2)',\n//             borderColor: 'rgba(255, 159, 64, 1)',\n//             borderWidth: 1\n//         }]\n//         }}\n//         options={{\n//         scales: {\n//             y: {\n//             beginAtZero: true\n//             }\n//         },\n//         plugins: {\n//             tooltip: {\n//             callbacks: {\n//                 label: function(context) {\n//                 return `${mostViewedCategoryData[context.dataIndex].category}: ${context.raw} seconds`;\n//                 }\n//             }\n//             }\n//         }\n//         }}\n//     />\n//     </div>\n// );\n// };\n\n// export default ChartPage;\nimport React from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport data from './data.json'; // Ensure this path is correct\n\nconst ChartPage = () => {\n  // Simple test data\n  const labels = ['Today', 'Yesterday', 'Saturday'];\n  const testData = [3000, 4000, 2000];\n\n  return (\n    <div>\n      <h1>YouTube Watch Analytics</h1>\n      <h2>Total Watch Time (Day/Date Wise)</h2>\n      <Bar \n        data={{\n          labels,\n          datasets: [{\n            label: 'Total Watch Time (seconds)',\n            data: testData,\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            borderColor: 'rgba(75, 192, 192, 1)',\n            borderWidth: 1\n          }]\n        }}\n        options={{\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nexport default ChartPage;\n"],"mappings":";AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,GAAG,QAAQ,iBAAiB;AACrC,OAAO,eAAe;AACtB,OAAOC,IAAI,MAAM,aAAa,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACtB;EACA,MAAMC,MAAM,GAAG,CAAC,OAAO,EAAE,WAAW,EAAE,UAAU,CAAC;EACjD,MAAMC,QAAQ,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EAEnC,oBACEH,OAAA;IAAAI,QAAA,gBACEJ,OAAA;MAAAI,QAAA,EAAI;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChCR,OAAA;MAAAI,QAAA,EAAI;IAAgC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzCR,OAAA,CAACH,GAAG;MACFC,IAAI,EAAE;QACJI,MAAM;QACNO,QAAQ,EAAE,CAAC;UACTC,KAAK,EAAE,4BAA4B;UACnCZ,IAAI,EAAEK,QAAQ;UACdQ,eAAe,EAAE,yBAAyB;UAC1CC,WAAW,EAAE,uBAAuB;UACpCC,WAAW,EAAE;QACf,CAAC;MACH,CAAE;MACFC,OAAO,EAAE;QACPC,MAAM,EAAE;UACNC,CAAC,EAAE;YACDC,WAAW,EAAE;UACf;QACF;MACF;IAAE;MAAAZ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACU,EAAA,GA9BIjB,SAAS;AAgCf,eAAeA,SAAS;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}