{"ast":null,"code":"// import React from 'react';\n// import { Bar } from 'react-chartjs-2';\n// import 'chart.js/auto';\n// import data from './data.json'; // Assume the JSON data is in a file called data.json\n\n// const processData = (data) => {\n// const totalWatchTime = {};\n// const mostViewedChannel = {};\n// const mostViewedCategory = {};\n\n// for (const day in data) {\n//     totalWatchTime[day] = 0;\n//     mostViewedChannel[day] = {};\n//     mostViewedCategory[day] = {};\n\n//     data[day].forEach(video => {\n//     totalWatchTime[day] += video.watchTime;\n\n//     if (mostViewedChannel[day][video.channelName]) {\n//         mostViewedChannel[day][video.channelName] += video.watchTime;\n//     } else {\n//         mostViewedChannel[day][video.channelName] = video.watchTime;\n//     }\n\n//     if (mostViewedCategory[day][video.category]) {\n//         mostViewedCategory[day][video.category] += video.watchTime;\n//     } else {\n//         mostViewedCategory[day][video.category] = video.watchTime;\n//     }\n//     });\n// }\n\n// return { totalWatchTime, mostViewedChannel, mostViewedCategory };\n// };\n\n// const { totalWatchTime, mostViewedChannel, mostViewedCategory } = processData(data);\n\n// const findMaxKey = (obj) => {\n// return Object.keys(obj).reduce((a, b) => (obj[a] > obj[b] ? a : b));\n// };\n\n// const labels = Object.keys(data);\n\n// const totalWatchTimeData = labels.map(day => totalWatchTime[day]);\n\n// const mostViewedChannelData = labels.map(day => {\n// const channel = findMaxKey(mostViewedChannel[day]);\n// return { day, channel, watchTime: mostViewedChannel[day][channel] };\n// });\n\n// const mostViewedCategoryData = labels.map(day => {\n// const category = findMaxKey(mostViewedCategory[day]);\n// return { day, category, watchTime: mostViewedCategory[day][category] };\n// });\n\n// const ChartPage = () => {\n// return (\n//     <div>\n//     <h1>YouTube Watch Analytics</h1>\n\n//     <h2>Total Watch Time (Day/Date Wise)</h2>\n//     <Bar \n//         data={{\n//         labels,\n//         datasets: [{\n//             label: 'Total Watch Time (seconds)',\n//             data: totalWatchTimeData,\n//             backgroundColor: 'rgba(75, 192, 192, 0.2)',\n//             borderColor: 'rgba(75, 192, 192, 1)',\n//             borderWidth: 1\n//         }]\n//         }}\n//         options={{\n//         scales: {\n//             y: {\n//             beginAtZero: true\n//             }\n//         }\n//         }}\n//     />\n\n//     <h2>Most Viewed Channel (Day/Date Wise)</h2>\n//     <Bar \n//         data={{\n//         labels,\n//         datasets: [{\n//             label: 'Most Viewed Channel',\n//             data: mostViewedChannelData.map(item => item.watchTime),\n//             backgroundColor: 'rgba(153, 102, 255, 0.2)',\n//             borderColor: 'rgba(153, 102, 255, 1)',\n//             borderWidth: 1\n//         }]\n//         }}\n//         options={{\n//         scales: {\n//             y: {\n//             beginAtZero: true\n//             }\n//         },\n//         plugins: {\n//             tooltip: {\n//             callbacks: {\n//                 label: function(context) {\n//                 return `${mostViewedChannelData[context.dataIndex].channel}: ${context.raw} seconds`;\n//                 }\n//             }\n//             }\n//         }\n//         }}\n//     />\n\n//     <h2>Most Viewed Category (Day/Date Wise)</h2>\n//     <Bar \n//         data={{\n//         labels,\n//         datasets: [{\n//             label: 'Most Viewed Category',\n//             data: mostViewedCategoryData.map(item => item.watchTime),\n//             backgroundColor: 'rgba(255, 159, 64, 0.2)',\n//             borderColor: 'rgba(255, 159, 64, 1)',\n//             borderWidth: 1\n//         }]\n//         }}\n//         options={{\n//         scales: {\n//             y: {\n//             beginAtZero: true\n//             }\n//         },\n//         plugins: {\n//             tooltip: {\n//             callbacks: {\n//                 label: function(context) {\n//                 return `${mostViewedCategoryData[context.dataIndex].category}: ${context.raw} seconds`;\n//                 }\n//             }\n//             }\n//         }\n//         }}\n//     />\n//     </div>\n// );\n// };\n\n// export default ChartPage;","map":{"version":3,"names":[],"sources":["/Users/priyanshsaxena/Documents/SummerProjects/Watch_Analytics/frontend/youtube-watch-analytics/src/ChartPage.js"],"sourcesContent":["// import React from 'react';\n// import { Bar } from 'react-chartjs-2';\n// import 'chart.js/auto';\n// import data from './data.json'; // Assume the JSON data is in a file called data.json\n\n// const processData = (data) => {\n// const totalWatchTime = {};\n// const mostViewedChannel = {};\n// const mostViewedCategory = {};\n\n// for (const day in data) {\n//     totalWatchTime[day] = 0;\n//     mostViewedChannel[day] = {};\n//     mostViewedCategory[day] = {};\n\n//     data[day].forEach(video => {\n//     totalWatchTime[day] += video.watchTime;\n\n//     if (mostViewedChannel[day][video.channelName]) {\n//         mostViewedChannel[day][video.channelName] += video.watchTime;\n//     } else {\n//         mostViewedChannel[day][video.channelName] = video.watchTime;\n//     }\n\n//     if (mostViewedCategory[day][video.category]) {\n//         mostViewedCategory[day][video.category] += video.watchTime;\n//     } else {\n//         mostViewedCategory[day][video.category] = video.watchTime;\n//     }\n//     });\n// }\n\n// return { totalWatchTime, mostViewedChannel, mostViewedCategory };\n// };\n\n// const { totalWatchTime, mostViewedChannel, mostViewedCategory } = processData(data);\n\n// const findMaxKey = (obj) => {\n// return Object.keys(obj).reduce((a, b) => (obj[a] > obj[b] ? a : b));\n// };\n\n// const labels = Object.keys(data);\n\n// const totalWatchTimeData = labels.map(day => totalWatchTime[day]);\n\n// const mostViewedChannelData = labels.map(day => {\n// const channel = findMaxKey(mostViewedChannel[day]);\n// return { day, channel, watchTime: mostViewedChannel[day][channel] };\n// });\n\n// const mostViewedCategoryData = labels.map(day => {\n// const category = findMaxKey(mostViewedCategory[day]);\n// return { day, category, watchTime: mostViewedCategory[day][category] };\n// });\n\n// const ChartPage = () => {\n// return (\n//     <div>\n//     <h1>YouTube Watch Analytics</h1>\n    \n//     <h2>Total Watch Time (Day/Date Wise)</h2>\n//     <Bar \n//         data={{\n//         labels,\n//         datasets: [{\n//             label: 'Total Watch Time (seconds)',\n//             data: totalWatchTimeData,\n//             backgroundColor: 'rgba(75, 192, 192, 0.2)',\n//             borderColor: 'rgba(75, 192, 192, 1)',\n//             borderWidth: 1\n//         }]\n//         }}\n//         options={{\n//         scales: {\n//             y: {\n//             beginAtZero: true\n//             }\n//         }\n//         }}\n//     />\n    \n//     <h2>Most Viewed Channel (Day/Date Wise)</h2>\n//     <Bar \n//         data={{\n//         labels,\n//         datasets: [{\n//             label: 'Most Viewed Channel',\n//             data: mostViewedChannelData.map(item => item.watchTime),\n//             backgroundColor: 'rgba(153, 102, 255, 0.2)',\n//             borderColor: 'rgba(153, 102, 255, 1)',\n//             borderWidth: 1\n//         }]\n//         }}\n//         options={{\n//         scales: {\n//             y: {\n//             beginAtZero: true\n//             }\n//         },\n//         plugins: {\n//             tooltip: {\n//             callbacks: {\n//                 label: function(context) {\n//                 return `${mostViewedChannelData[context.dataIndex].channel}: ${context.raw} seconds`;\n//                 }\n//             }\n//             }\n//         }\n//         }}\n//     />\n    \n//     <h2>Most Viewed Category (Day/Date Wise)</h2>\n//     <Bar \n//         data={{\n//         labels,\n//         datasets: [{\n//             label: 'Most Viewed Category',\n//             data: mostViewedCategoryData.map(item => item.watchTime),\n//             backgroundColor: 'rgba(255, 159, 64, 0.2)',\n//             borderColor: 'rgba(255, 159, 64, 1)',\n//             borderWidth: 1\n//         }]\n//         }}\n//         options={{\n//         scales: {\n//             y: {\n//             beginAtZero: true\n//             }\n//         },\n//         plugins: {\n//             tooltip: {\n//             callbacks: {\n//                 label: function(context) {\n//                 return `${mostViewedCategoryData[context.dataIndex].category}: ${context.raw} seconds`;\n//                 }\n//             }\n//             }\n//         }\n//         }}\n//     />\n//     </div>\n// );\n// };\n\n// export default ChartPage;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}